=========== Make It Fail ===========

It seems easy, but if you don't do it, debugging is hard.

•   Do it again.

•   Start at the beginning.

•   Stimulate the failure.

•   But don't simulate the failure.

•   Find the uncontrolled condition that makes it intermittent.
 
•   Record everything and find the signature of intermittent bugs.

•   Don't trust statistics too much.

•   Know that "that" can happen.

•   Never throw away a debugging tool.



=========== Quit Thinking and Look ===========

You can think up thousands of possible reasons for a failure. You can see only the actual cause.

•   See the failure.

•   See the details

•   Build instrumentation in.

•   Add instrumentation on.

•   Don't be afraid to dive in.

•   Guess only to focus the search.



=========== Divide and Conquer ===========

It's hard for a bug to keep hiding when its hiding place keeps getting cut in half.

•   Narrow the search with successive approximation.

•   Get the range.

•   Determine which side of the bug you are on.

•   Use easy−to−spot test patterns.

•   Start with the bad.

•   Fix the bugs you know about.

•   Fix the noise first. 




Source :
Debugging—The Nine Indispensable Rules for Finding Even the Most Elusive Software and Hardware Problems